"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generator = void 0;

var _Metalsmith = _interopRequireDefault(require("Metalsmith"));

var _ejs = _interopRequireDefault(require("ejs"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _minimatch = _interopRequireDefault(require("minimatch"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rm = require("rimraf").sync;

var generator = config => {
  var {
    metadata,
    src,
    dest
  } = config;

  if (!src) {
    return Promise.reject(new Error("\u65E0\u6548\u7684source\uFF1A".concat(src)));
  } // 官方模板


  return new Promise((resolve, reject) => {
    var metalsmith = (0, _Metalsmith.default)(process.cwd()).metadata(metadata).clean(false).source(src).destination(dest);

    var ignoreFile = _path.default.resolve(process.cwd(), src, _constants.CONSTTYPE.FILE_IGNORE);

    if (_fs.default.existsSync(ignoreFile)) {
      // 定义一个用于移除模板中被忽略文件的metalsmith插件
      metalsmith.use((files, metalsmith, done) => {
        var meta = metalsmith.metadata(); // 先对ignore文件进行渲染，然后按行切割ignore文件的内容，拿到被忽略清单

        var ignores = _ejs.default.render(_fs.default.readFileSync(ignoreFile).toString(), meta).split("\n").filter(item => !!item.length);

        Object.keys(files).forEach(fileName => {
          // 移除被忽略的文件
          ignores.forEach(ignorePattern => {
            if ((0, _minimatch.default)(fileName, ignorePattern)) {
              delete files[fileName];
            }
          });
        });
        done();
      });
    }

    metalsmith.use((files, metalsmith, done) => {
      var meta = metalsmith.metadata(); // 编译模板

      Object.keys(files).forEach(fileName => {
        try {
          var t = files[fileName].contents.toString();

          if (/(<%.*%>)/g.test(t)) {
            files[fileName].contents = Buffer.from(_ejs.default.render(t, meta));
          }
        } catch (err) {
          console.log("fileName------------", fileName);
          console.log("er -------------", err);
        }
      });
      done();
    }).build(err => {
      rm(src);
      err ? reject(err) : resolve();
    });
  });
};

exports.generator = generator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZW5lcmF0b3IudHMiXSwibmFtZXMiOlsicm0iLCJyZXF1aXJlIiwic3luYyIsImdlbmVyYXRvciIsImNvbmZpZyIsIm1ldGFkYXRhIiwic3JjIiwiZGVzdCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsInJlc29sdmUiLCJtZXRhbHNtaXRoIiwicHJvY2VzcyIsImN3ZCIsImNsZWFuIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJpZ25vcmVGaWxlIiwicGF0aCIsIkNPTlNUVFlQRSIsIkZJTEVfSUdOT1JFIiwiZnMiLCJleGlzdHNTeW5jIiwidXNlIiwiZmlsZXMiLCJkb25lIiwibWV0YSIsImlnbm9yZXMiLCJlanMiLCJyZW5kZXIiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsInNwbGl0IiwiZmlsdGVyIiwiaXRlbSIsImxlbmd0aCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZmlsZU5hbWUiLCJpZ25vcmVQYXR0ZXJuIiwidCIsImNvbnRlbnRzIiwidGVzdCIsIkJ1ZmZlciIsImZyb20iLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiYnVpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQU5BLElBQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsSUFBN0I7O0FBT08sSUFBTUMsU0FBUyxHQUFJQyxNQUFELElBQWdCO0FBQ3ZDLE1BQUk7QUFBRUMsSUFBQUEsUUFBRjtBQUFZQyxJQUFBQSxHQUFaO0FBQWlCQyxJQUFBQTtBQUFqQixNQUEwQkgsTUFBOUI7O0FBQ0EsTUFBSSxDQUFDRSxHQUFMLEVBQVU7QUFDUixXQUFPRSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxJQUFJQyxLQUFKLHlDQUF1QkosR0FBdkIsRUFBZixDQUFQO0FBQ0QsR0FKc0MsQ0FLdkM7OztBQUNBLFNBQU8sSUFBSUUsT0FBSixDQUFZLENBQUNHLE9BQUQsRUFBVUYsTUFBVixLQUFxQjtBQUN0QyxRQUFNRyxVQUFVLEdBQUcseUJBQVdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFYLEVBQ2hCVCxRQURnQixDQUNQQSxRQURPLEVBRWhCVSxLQUZnQixDQUVWLEtBRlUsRUFHaEJDLE1BSGdCLENBR1RWLEdBSFMsRUFJaEJXLFdBSmdCLENBSUpWLElBSkksQ0FBbkI7O0FBS0EsUUFBTVcsVUFBVSxHQUFHQyxjQUFLUixPQUFMLENBQWFFLE9BQU8sQ0FBQ0MsR0FBUixFQUFiLEVBQTRCUixHQUE1QixFQUFpQ2MscUJBQVVDLFdBQTNDLENBQW5COztBQUNBLFFBQUlDLFlBQUdDLFVBQUgsQ0FBY0wsVUFBZCxDQUFKLEVBQStCO0FBQzdCO0FBQ0FOLE1BQUFBLFVBQVUsQ0FBQ1ksR0FBWCxDQUFlLENBQUNDLEtBQUQsRUFBWWIsVUFBWixFQUE0QmMsSUFBNUIsS0FBeUM7QUFDdEQsWUFBTUMsSUFBSSxHQUFHZixVQUFVLENBQUNQLFFBQVgsRUFBYixDQURzRCxDQUV0RDs7QUFDQSxZQUFNdUIsT0FBTyxHQUFHQyxhQUNiQyxNQURhLENBQ05SLFlBQUdTLFlBQUgsQ0FBZ0JiLFVBQWhCLEVBQTRCYyxRQUE1QixFQURNLEVBQ2tDTCxJQURsQyxFQUViTSxLQUZhLENBRVAsSUFGTyxFQUdiQyxNQUhhLENBR0xDLElBQUQsSUFBYyxDQUFDLENBQUNBLElBQUksQ0FBQ0MsTUFIZixDQUFoQjs7QUFJQUMsUUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVliLEtBQVosRUFBbUJjLE9BQW5CLENBQTJCQyxRQUFRLElBQUk7QUFDckM7QUFDQVosVUFBQUEsT0FBTyxDQUFDVyxPQUFSLENBQWlCRSxhQUFELElBQTBCO0FBQ3hDLGdCQUFJLHdCQUFVRCxRQUFWLEVBQW9CQyxhQUFwQixDQUFKLEVBQXdDO0FBQ3RDLHFCQUFPaEIsS0FBSyxDQUFDZSxRQUFELENBQVo7QUFDRDtBQUNGLFdBSkQ7QUFLRCxTQVBEO0FBUUFkLFFBQUFBLElBQUk7QUFDTCxPQWhCRDtBQWlCRDs7QUFDRGQsSUFBQUEsVUFBVSxDQUNQWSxHQURILENBQ08sQ0FBQ0MsS0FBRCxFQUFZYixVQUFaLEVBQTRCYyxJQUE1QixLQUF5QztBQUM1QyxVQUFNQyxJQUFJLEdBQUdmLFVBQVUsQ0FBQ1AsUUFBWCxFQUFiLENBRDRDLENBRTVDOztBQUNBZ0MsTUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVliLEtBQVosRUFBbUJjLE9BQW5CLENBQTJCQyxRQUFRLElBQUk7QUFDckMsWUFBSTtBQUNGLGNBQU1FLENBQVEsR0FBR2pCLEtBQUssQ0FBQ2UsUUFBRCxDQUFMLENBQWdCRyxRQUFoQixDQUF5QlgsUUFBekIsRUFBakI7O0FBQ0EsY0FBSSxZQUFZWSxJQUFaLENBQWlCRixDQUFqQixDQUFKLEVBQXlCO0FBQ3ZCakIsWUFBQUEsS0FBSyxDQUFDZSxRQUFELENBQUwsQ0FBZ0JHLFFBQWhCLEdBQTJCRSxNQUFNLENBQUNDLElBQVAsQ0FBWWpCLGFBQUlDLE1BQUosQ0FBV1ksQ0FBWCxFQUFjZixJQUFkLENBQVosQ0FBM0I7QUFDRDtBQUNGLFNBTEQsQ0FLRSxPQUFPb0IsR0FBUCxFQUFZO0FBQ1pDLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHNCQUFaLEVBQW9DVCxRQUFwQztBQUNBUSxVQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWixFQUFnQ0YsR0FBaEM7QUFDRDtBQUNGLE9BVkQ7QUFXQXJCLE1BQUFBLElBQUk7QUFDTCxLQWhCSCxFQWlCR3dCLEtBakJILENBaUJVSCxHQUFELElBQWE7QUFDbEIvQyxNQUFBQSxFQUFFLENBQUNNLEdBQUQsQ0FBRjtBQUNBeUMsTUFBQUEsR0FBRyxHQUFHdEMsTUFBTSxDQUFDc0MsR0FBRCxDQUFULEdBQWlCcEMsT0FBTyxFQUEzQjtBQUNELEtBcEJIO0FBcUJELEdBaERNLENBQVA7QUFpREQsQ0F2RE0iLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBybSA9IHJlcXVpcmUoXCJyaW1yYWZcIikuc3luYztcbmltcG9ydCBNZXRhbHNtaXRoIGZyb20gXCJNZXRhbHNtaXRoXCI7XG5pbXBvcnQgZWpzIGZyb20gXCJlanNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgbWluaW1hdGNoIGZyb20gXCJtaW5pbWF0Y2hcIjtcbmltcG9ydCB7IENPTlNUVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCBjb25zdCBnZW5lcmF0b3IgPSAoY29uZmlnOmFueSkgPT4ge1xuICBsZXQgeyBtZXRhZGF0YSwgc3JjLCBkZXN0IH0gPSBjb25maWc7XG4gIGlmICghc3JjKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihg5peg5pWI55qEc291cmNl77yaJHtzcmN9YCkpO1xuICB9XG4gIC8vIOWumOaWueaooeadv1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG1ldGFsc21pdGggPSBNZXRhbHNtaXRoKHByb2Nlc3MuY3dkKCkpXG4gICAgICAubWV0YWRhdGEobWV0YWRhdGEpXG4gICAgICAuY2xlYW4oZmFsc2UpXG4gICAgICAuc291cmNlKHNyYylcbiAgICAgIC5kZXN0aW5hdGlvbihkZXN0KTtcbiAgICBjb25zdCBpZ25vcmVGaWxlID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIHNyYywgQ09OU1RUWVBFLkZJTEVfSUdOT1JFKTtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhpZ25vcmVGaWxlKSkge1xuICAgICAgLy8g5a6a5LmJ5LiA5Liq55So5LqO56e76Zmk5qih5p2/5Lit6KKr5b+955Wl5paH5Lu255qEbWV0YWxzbWl0aOaPkuS7tlxuICAgICAgbWV0YWxzbWl0aC51c2UoKGZpbGVzOmFueSwgbWV0YWxzbWl0aDphbnksIGRvbmU6YW55KSA9PiB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhbHNtaXRoLm1ldGFkYXRhKCk7XG4gICAgICAgIC8vIOWFiOWvuWlnbm9yZeaWh+S7tui/m+ihjOa4suafk++8jOeEtuWQjuaMieihjOWIh+WJsmlnbm9yZeaWh+S7tueahOWGheWuue+8jOaLv+WIsOiiq+W/veeVpea4heWNlVxuICAgICAgICBjb25zdCBpZ25vcmVzID0gZWpzXG4gICAgICAgICAgLnJlbmRlcihmcy5yZWFkRmlsZVN5bmMoaWdub3JlRmlsZSkudG9TdHJpbmcoKSwgbWV0YSlcbiAgICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgICAuZmlsdGVyKChpdGVtOmFueSkgPT4gISFpdGVtLmxlbmd0aCk7XG4gICAgICAgIE9iamVjdC5rZXlzKGZpbGVzKS5mb3JFYWNoKGZpbGVOYW1lID0+IHtcbiAgICAgICAgICAvLyDnp7vpmaTooqvlv73nlaXnmoTmlofku7ZcbiAgICAgICAgICBpZ25vcmVzLmZvckVhY2goKGlnbm9yZVBhdHRlcm46c3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAobWluaW1hdGNoKGZpbGVOYW1lLCBpZ25vcmVQYXR0ZXJuKSkge1xuICAgICAgICAgICAgICBkZWxldGUgZmlsZXNbZmlsZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG1ldGFsc21pdGhcbiAgICAgIC51c2UoKGZpbGVzOmFueSwgbWV0YWxzbWl0aDphbnksIGRvbmU6YW55KSA9PiB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhbHNtaXRoLm1ldGFkYXRhKCk7XG4gICAgICAgIC8vIOe8luivkeaooeadv1xuICAgICAgICBPYmplY3Qua2V5cyhmaWxlcykuZm9yRWFjaChmaWxlTmFtZSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHQ6c3RyaW5nID0gZmlsZXNbZmlsZU5hbWVdLmNvbnRlbnRzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoLyg8JS4qJT4pL2cudGVzdCh0KSkge1xuICAgICAgICAgICAgICBmaWxlc1tmaWxlTmFtZV0uY29udGVudHMgPSBCdWZmZXIuZnJvbShlanMucmVuZGVyKHQsIG1ldGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmlsZU5hbWUtLS0tLS0tLS0tLS1cIiwgZmlsZU5hbWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlciAtLS0tLS0tLS0tLS0tXCIsIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSlcbiAgICAgIC5idWlsZCgoZXJyOmFueSkgPT4ge1xuICAgICAgICBybShzcmMpO1xuICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICB9KTtcbn07XG4iXX0=